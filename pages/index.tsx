import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback, useState } from "react";
import { Controlled } from "react-codemirror2";
import styled from "styled-components";
import axios from "axios";
import JSONPretty from "react-json-pretty";

const LIMIT = 12; // Max keys permitted by ms translator api via rapide api

const Home: NextPage = () => {
  const [json, setJson] = useState("");
  const [jsonTranslated, setJsonTranslated] = useState("");

  // according to ms trnslate free tier can translate ac chunk LIMIT items only
  const translateChunk = async (chunk: string[]) => {
    if (chunk.length > LIMIT) {
      throw Error(`Can not pass ${LIMIT} item`);
    }

    // Rapid api request config
    const options = {
      params: {
        to: "ar",
        from: "en",
        "api-version": "3.0",
        profanityAction: "NoAction",
        textType: "plain",
      },
      headers: {
        "content-type": "application/json",
        "x-rapidapi-host": "microsoft-translator-text.p.rapidapi.com",
        "x-rapidapi-key": process.env.NEXT_PUBLIC_API_KEY!,
      },
    };

    // Formatting the chunk to an apprropriate object according to ms api [{Text:string}]
    const data = chunk.map((item) => {
      return {
        Text: item,
      };
    });

    const res = await axios.post(
      "https://microsoft-translator-text.p.rapidapi.com/translate",
      data,
      options
    );

    // returning array with translated strings
    return res.data.map(
      (oneTranslate: { translations: [{ text: string; to: string }] }) => {
        return oneTranslate.translations[0].text;
      }
    );
  };

  // create appropriate json format to display
  const fillData = (data: object) => {
    try {
      const stringData = JSON.stringify(data);
      setJsonTranslated(stringData);
    } catch (error) {
      console.error(error);
    }
  };

  /**
   * Returns void
   *
   * @param {object} targetObject The text value to trnaslate
   * @param {function} callback Take as the data translated as and arguemnt
   */
  const main = useCallback(async (targetObject, callback) => {
    try {
      const parsedTarget = JSON.parse(targetObject);
      let result: any = {}; // to collect translated
      const values: string[] = Object.values(parsedTarget);

      let allChunksValues = []; // all translated data pushed to this array

      if (values.length > LIMIT) {
        let currentChunkIndex = 0;
        let allChunksCount = Math.ceil(values.length / LIMIT);

        while (currentChunkIndex <= allChunksCount - 1) {
          let start = currentChunkIndex * LIMIT;
          let end = start + LIMIT;

          const chunk = values.slice(start, end);

          const translatedChunk = await translateChunk(chunk);
          allChunksValues.push(...translatedChunk);

          currentChunkIndex++;
        }

        // filling data,  api returned data as the order they were sent!
        let fillingIndex = 0;
        for (const property in parsedTarget) {
          result[property] = allChunksValues[fillingIndex];
          fillingIndex++;
        }

        callback(result);
      }
    } catch (error) {
      console.error(error);
    }
  }, []);

  return (
    <div>
      <Head>
        <title>Json translator</title>
        <meta name="description" content="Generated by Json translator" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Container>
          <h1>Json translator üåç</h1>
          <Flex>
            <div className="editor">
              <Controlled
                options={{
                  mode: "javascript",
                  theme: "seti",
                  lineNumbers: true,
                }}
                value={json}
                onBeforeChange={(editor, data, value) => {
                  setJson(value);
                }}
                onChange={(editor, data, value) => {
                  console.log(editor, data, value);
                }}
              />
            </div>
            <Panel>
              <Button onClick={() => main(json, fillData)}>Translate</Button>
            </Panel>
            <div className="editor">
              <JSONPretty
                data={jsonTranslated}
                theme={require("react-json-pretty/dist/monikai")}
              />
            </div>
          </Flex>
        </Container>
      </main>

      <footer>
        <Container>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span>
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </Container>
      </footer>
    </div>
  );
};

export default Home;

const Container = styled.div`
  padding-left: 3rem;
  padding-right: 3rem;
`;
const Flex = styled.div`
  display: flex;
  & > .editor {
    flex: 1;
  }
`;

const Panel = styled.div`
  margin-left: 10px;
  margin-right: 10px;
  display: flex;
  align-items: center;
`;

const Button = styled.button`
  padding: 12px 24px;
  background-color: tomato;
  box-shadow: 0;
  border: 1px solid #ccc;
  color: #fff;
  font-weight: bold;
  border-radius: 4px;
  :hover {
    cursor: pointer;
    background-color: #f04122;
  }
  :active {
    background-color: #bd260b;
  }
`;
